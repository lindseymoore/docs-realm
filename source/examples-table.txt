.. _realm-examples:

======================
Realm Example Projects
======================

Explore engineering and community-provided example projects to learn best 
practices and common development patterns for Realm and Atlas App Services.

.. list-table::
  :header-rows: 1
  :widths: 15 35 25 25
  
  * - Project Name 
    - Description
    - Topics
    - Links for Available SDKs

  * - Multiple Realms
    - Use multiple realms to store different types of information. Sync 
      some but not all data.
    - Data Architecture
    - - `Flutter <some-outside-url>`__ 
      - `React Native <some-outside-url>`__

  * - Analytics/Telemetrics Data
    - Take sensor readings, push data to Atlas, and display the results in
      Atlas Charts or a time series collection.
    - Sensors, Atlas Charts, Internet of Things
    - - `C++ <some-outside-url>`__
      - `.NET <some-outside-url>`__
      - `Node.js <some-outside-url>`__
      - `Swift <some-outside-url>`__.

  * - Migrate Local to Synced Realm
    - Migrate your non-synced realm app to sync data between devices.
    - Data Architecture
    - - `Node.js <some-outside-url>`__ 
      - `React Native <some-outside-url>`__

  * - Build a ViewModel
    - Separate your business logic from Realm operations for easier testing
      and a cleaner app architecture.
    - App Architecture
    - - `Kotlin <some-outside-url>`__ 

  * - Realm with REST APIs
    - Use Realm for real-time operations together with REST APIs for 
      server-side business logic - all with a single ViewModel.
    - Data Architecture, App Architecture
    - - `.NET <some-outside-url>`__ 

  * - Atlas Search for Mobile Apps
    - Use Atlas Search to find information in remote data without syncing 
      it locally to your mobile app.
    - Atlas Search
    - - `.NET <some-outside-url>`__ 

  * - User's Online State
    - Detect when a user is online or offline. Display an avatar or send
      a notification based on user presence.
    - Offline Functionality
    - - `Kotlin <some-outside-url>`__ 

  * - Display a Live Leaderboard
    - Display results in realtime using Triggers, Functions, and Atlas 
      Device Sync.
    - Live Input
    - - `Flutter <some-outside-url>`__

  * - Show a Toast Message
    - Show a toast message based on changes to a synced value. Update the 
      value using Triggers and Functions.
    - Notifications
    - - `Flutter <some-outside-url>`__

  * - Purchase Verification
    - Verify Google Play or Apple App Store purchases with server-side APIs.
      Offer additional functionality for paying subscribers.
    - Notifications
    - - `Kotlin <some-outside-url>`__
      - `Swift <some-outside-url>`__

  * - Large File Storage
    - Store large files, such as images, on a remote server. Use Triggers and
      Functions to store the references. Leverage Realm's offline-first design
      to store large images even offline.
    - Offline Connectivity, Large File Handling
    - - `.NET <some-outside-url>`_

  * - Connection State Change & Error Handling
    - Learn best practices around handling Sync connection state changes.
      Provide a seamless offline experience for users.
    - Testing, Offline Connectivity 
    - - `Flutter <some-outside-url>`__
      - `Kotlin <some-outside-url>`__
      - `.NET <some-outside-url>`__
      - `Node.js <some-outside-url>`__
      - `React Native <some-outside-url>`__
      - `Swift <some-outside-url>`__

  * - Offline Realm Access
    - Open a synced realm offline.
    - Offline Connectivity
    - - `Flutter <some-outside-url>`__
      - `Kotlin <some-outside-url>`__
      - `.NET <some-outside-url>`__
      - `Node.js <some-outside-url>`__
      - `React Native <some-outside-url>`__
      - `Swift <some-outside-url>`__

  * - Realm with REST APIs
    - Learn how to architect an app that integrates Realm (for real-time data)
      and REST APIs (for server-side business logic) into the same ViewModel. 
    - App Architecture 
    - - `.NET <some-outside-url>`_

  * - Offline Interface with APIs
    - Learn how to use Realm objects as an interface with external APIs or
      Atlas Triggers in a way that handles connectivity loss.
    - Offline Connectivity 
    - - `.NET <some-outside-url>`_

  * - Cache an External Datasource
    - Learn how to use Realm as an intelligent cache against an external 
      datasource, such as a CMS, microservice, or external database.
    - Data Architecture
    - - `.NET <some-outside-url>`_

  * - Mock a Sync Connection
    - Learn how to switch a synced realm for a non-synced realm to mock 
      having a Sync connection. Do local testing without the cloud.
    - Testing
    - - `Kotlin <some-outside-url>`_
