.. _flutter-serialization:

===========================
Serialization - Flutter SDK
===========================

.. facet::
  :name: genre
  :values: reference

.. meta::
  :description: Serialize objects to and from EJSON with a built-in feature for Atlas Device SDK for Flutter.

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

The Atlas Device SDK for Flutter supports serialization and deserialization of
:manual:`Extended JSON (ESJON) </reference/mongodb-extended-json>` to and from static Realm objects.
Serialization allows for easier integration with MongoDB APIs.

Supported Data Types for Serialization
--------------------------------------

The Flutter SDK supports serializing the following data types:

- Array
- Binary
- Boolean
- Date
- Document
- Decimal128
- Double
- Int32
- Int64
- MaxKey
- MinKey
- ObjectID
- String
- Symbol
- Null
- Undefined

For more information and examples on the serialization for each of these types,
see :manual:`BSON Data Types and Associated Representations </reference/mongodb-extended-json/#bson-data-types-and-associated-representations>`.

The realm-specific type, :ref:`RealmValue <flutter-realm-value>`, is also 
supported. The SDK does not currently support the following types: Code, 
CodeWScope, DBPointer, DBRef, Regular Expression, and Timestamp. 

Object Model for Serialization
------------------------------

Full-document encoding enables you to serialize and deserialize user-defined 
classes. You can create your object model as you normally would. The RealmObject class
model created by your ``part`` declaration provides the necessary encoder 
and decoder methods for serialization and deserialization. The following ``Pet``
object model will be used in the following examples:

.. literalinclude:: /examples/generated/flutter/pet.snippet.serialize-object-model.dart
    :language: dart

Serialization
-------------

For objects based on ``RealmObject`` classes, you can serialize to EJSON using the 
:flutter-sdk:`toEjson() <realm/toEJson.html>` method in the following two ways: 

.. io-code-block::
    :copyable: true
    
    .. input:: /examples/generated/flutter/serialization_test.snippet.serialize.dart
        :language: dart

    .. output:: 

        {
            type: Jumping Spider, 
            numberOfLegs: {$numberInt: 8}, 
            birthDate: {$date: {$numberLong: 1712707200000}}, 
            price: null
        }

Deserialization
---------------

Deserialize from EJSON using the :flutter-sdk:`fromEjson() <realm/fromEJson.html>`
method. The method takes EJSON for a specified object type as input and outputs 
a deserialized instance of the specified object type. 

The following example deserializes ``serializeByParam`` from the previous example:

.. literalinclude:: /examples/generated/flutter/serialization_test.snippet.deserialize.dart
    :language: dart

Custom Encoders
---------------

For non-Realm classes, you can use the ``@ejson`` annotation on the class constructor
to generate a decoder and encoder:

.. literalinclude:: /examples/generated/flutter/person.snippet.ejson-annotation.dart
    :language: dart

Alternatively, you can :flutter-sdk:`register <realm/register.html>` custom EJSON encoders and decoders.
