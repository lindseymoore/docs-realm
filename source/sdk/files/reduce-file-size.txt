.. _sdks-compact-file:

=========================
Reduce Database File Size
=========================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. tabs-selector:: drivers

.. meta::
  :description: Short description of the consolidated page used for SEO.
  :keywords: Realm, C++ SDK, Flutter SDK, Kotlin SDK, Java SDK, Node.js SDK, Swift SDK, code example

.. facet::
 :name: genre
 :values: tutorial

.. facet::
  :name: programming_language
  :values: cpp, csharp, dart, java, kotlin, objective-c, swift

The size of a realm file is always larger than the total 
size of the objects stored within it. This architecture enables some of 
realm's great performance, concurrency, and safety benefits. 

Realm writes new data within unused space tracked inside a
file. In some situations, unused space may comprise a significant 
portion of a realm file. Realm's default behavior is to automatically 
compact a realm file to prevent it from growing too large. 
You can use manual compaction strategies when 
automatic compaction is not sufficient for your use case 
or you're using a version of the SDK that doesn't have automatic 
compaction.

Automatic Compaction
--------------------

The SDK automatically compacts Realm files in the background by continuously reallocating data 
within the file and removing unused file space. Automatic compaction is sufficient for minimizing the Realm file size 
for most applications. 

Automatic compaction begins when the size of unused space in the file is more than twice the size of user 
data in the file. Automatic compaction only takes place when
the file is not being accessed.

Manual Compaction Strategies
----------------------------



.. tabs-drivers::

   tabs:
     - id: cpp-sdk
       content: |

         Manual compaction can be used for applications that require stricter 
         management of file size.

         Realm manual compaction works by:

         1. Reading the entire contents of the realm file
         2. Writing the contents to a new file at a different location
         3. Replacing the original file

         If the file contains a lot of data, this can be an expensive operation.

         Use the 
         :cpp-sdk:`should_compact_on_launch() <structrealm_1_1internal_1_1bridge_1_1realm_1_1config.html>` 
         method on the database configuration to attempt to compact the database. 
         Specify conditions to execute this method, such as:

         - The size of the file on disk
         - How much free space the file contains

         The following example shows setting the conditions to compact a realm if the 
         file is above 100 MB and 50% or less of the space in the realm file is used.

         .. literalinclude:: /examples/generated/cpp/compact.snippet.compact-database.cpp
            :language: cpp

     - id: csharp
       content: |

         Realm Configuration File
         ~~~~~~~~~~~~~~~~~~~~~~~~

         You can configure Realm to check the realm file each time 
         it is opened by specifying a 
         :dotnet-sdk:`ShouldCompactDelegate <reference/Realms.RealmConfiguration.ShouldCompactDelegate.html>` 
         in the configuration. The following code example shows how to do this:

         .. literalinclude:: /examples/generated/dotnet/Compact.snippet.config-compact.cs
            :language: csharp

         If the delegate returns ``true`` -- and the file is not in use -- the realm file 
         is compacted prior to making the instance available.


         Realm.Compact() Method
         ~~~~~~~~~~~~~~~~~~~~~~
         Alternatively, you can compact a realm file without first obtaining an instance 
         to the realm by calling the 
         :dotnet-sdk:`Compact() <reference/Realms.Realm.html#Realms_Realm_Compact_Realms_RealmConfigurationBase_>`
         method. The following example shows how to do this:

         .. literalinclude:: /examples/generated/dotnet/Compact.snippet.manual-compact.cs
            :language: csharp

         The ``Compact`` method will return true if the operation is successful.

     - id: dart
       content: |

         .. literalinclude:: /examples/generated/flutter/data_ingest.test.snippet.write-asymmetric-object.dart
            :language: dart

     - id: java
       content: |

         .. literalinclude:: /examples/MissingPlaceholders/api.java
            :language: java

     - id: java-kotlin
       content: |

         .. literalinclude:: /examples/MissingPlaceholders/example-java-kotlin.kt
            :language: kotlin

     - id: javascript
       content: |

         .. literalinclude:: /examples/MissingPlaceholders/example.js
            :language: javascript

     - id: kotlin
       content: |

         .. literalinclude:: /examples/generated/kotlin/AsymmetricSyncTest.snippet.create-asymmetric-object.kt
            :language: kotlin
            :emphasize-lines: 10, 11

     - id: objectivec
       content: |

         .. literalinclude:: /examples/MissingPlaceholders/example.m
            :language: objectivec

     - id: swift
       content: |

         .. literalinclude:: /examples/generated/code/start/AsymmetricSync.snippet.create-asymmetric-object.swift
            :language: swift

     - id: typescript
       content: |

         .. literalinclude::  /examples/generated/node/asymmetric-sync.snippet.write-asymmetric-object.ts
            :language: typescript
